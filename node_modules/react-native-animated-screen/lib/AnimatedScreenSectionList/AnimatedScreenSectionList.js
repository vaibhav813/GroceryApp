var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useContext, useState, useMemo, useCallback } from 'react';
import { Animated, View, } from 'react-native';
import AnimatedScreenContext from '../AnimatedScreenContext';
const AnimatedScreenSectionList = (_a) => {
    var { animatedStyle, style, ListFooterComponent = () => null } = _a, sectionListProps = __rest(_a, ["animatedStyle", "style", "ListFooterComponent"]);
    const [contentHeight, setContentHeight] = useState(0);
    const [containerHeight, setContainerHeight] = useState(0);
    const { scrollY, onScroll, headerMaxHeight, headerMinHeight } = useContext(AnimatedScreenContext);
    const shouldScroll = useMemo(() => contentHeight > containerHeight - headerMaxHeight, [contentHeight, containerHeight, headerMaxHeight]);
    const handleSetContent = useCallback((_, height) => setContentHeight(height), []);
    const handleSetContainer = useCallback(e => setContainerHeight(e.nativeEvent.layout.height), []);
    const contentStyle = useMemo(() => ({
        minHeight: shouldScroll ? containerHeight + headerMaxHeight : undefined,
    }), [shouldScroll, containerHeight, headerMaxHeight]);
    const handleScroll = (e) => {
        if (onScroll) {
            onScroll(e);
        }
        scrollY.setValue(e.nativeEvent.contentOffset.y);
    };
    return (<>
      <Animated.SectionList onScroll={handleScroll} scrollEventThrottle={16} stickySectionHeadersEnabled bounces={false} onLayout={handleSetContainer} onContentSizeChange={handleSetContent} contentContainerStyle={contentStyle} scrollEnabled={shouldScroll} ListFooterComponent={<>
            <ListFooterComponent />
            <View style={{ height: headerMinHeight }}/>
          </>} style={[
        animatedStyle && animatedStyle(scrollY),
        {
            paddingTop: scrollY.interpolate({
                inputRange: [0, headerMaxHeight],
                outputRange: [headerMaxHeight, headerMinHeight],
                extrapolate: 'clamp',
            }),
        },
        style,
    ]} 
    // eslint-disable-next-line react/jsx-props-no-spreading
    {...sectionListProps}/>
    </>);
};
export default React.memo(AnimatedScreenSectionList);
