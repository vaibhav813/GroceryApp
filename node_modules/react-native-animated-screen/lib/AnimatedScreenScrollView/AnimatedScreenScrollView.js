var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useContext } from 'react';
import { Animated, View, } from 'react-native';
import AnimatedScreenContext from '../AnimatedScreenContext';
const AnimatedScreenScrollView = (_a) => {
    var { animatedStyle, children, style, scrollViewRef } = _a, scrollViewProps = __rest(_a, ["animatedStyle", "children", "style", "scrollViewRef"]);
    const { scrollY, onScroll, headerMaxHeight, headerMinHeight, disableParallaxEffect, } = useContext(AnimatedScreenContext);
    const offSet = disableParallaxEffect
        ? headerMaxHeight + headerMinHeight
        : headerMinHeight;
    const handleScroll = (e) => {
        if (onScroll) {
            onScroll(e);
        }
        scrollY.setValue(e.nativeEvent.contentOffset.y);
    };
    return (<Animated.ScrollView ref={scrollViewRef} onScroll={handleScroll} showsVerticalScrollIndicator={false} scrollEventThrottle={16} bounces={false} style={[
        animatedStyle && animatedStyle(scrollY),
        {
            paddingTop: scrollY.interpolate({
                inputRange: [0, headerMaxHeight],
                outputRange: [headerMaxHeight, offSet],
                extrapolate: 'clamp',
            }),
        },
        style,
    ]} {...scrollViewProps}>
      {children}
      <View style={{ height: offSet }}/>
    </Animated.ScrollView>);
};
export default React.memo(AnimatedScreenScrollView);
