var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useContext, useState, useMemo, useCallback } from 'react';
import { Animated, View, } from 'react-native';
import AnimatedScreenContext from '../AnimatedScreenContext';
const AnimatedScreenFlatList = (_a) => {
    var { animatedStyle, style, ListFooterComponent = () => null, contentContainerStyle = {}, onScroll: onScrollFromProps, flatlistRef } = _a, flatListProps = __rest(_a, ["animatedStyle", "style", "ListFooterComponent", "contentContainerStyle", "onScroll", "flatlistRef"]);
    const [contentHeight, setContentHeight] = useState(0);
    const [containerHeight, setContainerHeight] = useState(0);
    const { scrollY, onScroll, headerMaxHeight, headerMinHeight, disableParallaxEffect, } = useContext(AnimatedScreenContext);
    const shouldScroll = useMemo(() => contentHeight > containerHeight - headerMaxHeight, [contentHeight, containerHeight, headerMaxHeight]);
    const handleSetContent = useCallback((_, height) => setContentHeight(height), []);
    const handleSetContainer = useCallback(e => setContainerHeight(e.nativeEvent.layout.height), []);
    const contentStyle = useMemo(() => (Object.assign({ minHeight: shouldScroll ? containerHeight + headerMaxHeight : undefined }, contentContainerStyle)), [shouldScroll, containerHeight, headerMaxHeight, contentContainerStyle]);
    const offSet = disableParallaxEffect
        ? headerMaxHeight + headerMinHeight
        : headerMinHeight;
    const listFooter = useMemo(() => {
        return (<>
        <ListFooterComponent />
        <View style={{ height: offSet }}/>
      </>);
    }, [ListFooterComponent, offSet]);
    const flatListStyle = useMemo(() => {
        return [
            animatedStyle && animatedStyle(scrollY),
            {
                paddingTop: scrollY.interpolate({
                    inputRange: [0, headerMaxHeight],
                    outputRange: [headerMaxHeight, offSet],
                    extrapolate: 'clamp',
                }),
            },
            style,
        ];
    }, [animatedStyle, headerMaxHeight, headerMinHeight, scrollY, style]);
    const handleScroll = (e) => {
        if (onScroll) {
            onScroll(e);
        }
        if (onScrollFromProps) {
            onScrollFromProps(e);
        }
        scrollY.setValue(e.nativeEvent.contentOffset.y);
    };
    return (<Animated.FlatList ref={flatlistRef} onScroll={handleScroll} scrollEventThrottle={16} bounces={false} onLayout={handleSetContainer} onContentSizeChange={handleSetContent} contentContainerStyle={contentStyle} scrollEnabled={shouldScroll} ListFooterComponent={listFooter} style={flatListStyle} {...flatListProps}/>);
};
export default React.memo(AnimatedScreenFlatList);
